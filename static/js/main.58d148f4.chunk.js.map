{"version":3,"sources":["components/LinkButton.js","components/Login.js","components/PlayerOptionItem.js","components/PlayerOptionList.js","components/Card.js","components/CardDisplay.js","components/Results.js","utils/options.js","components/CardTracker.js","database/firebase/firebase.js","api/unsplash.js","components/Game.js","components/Modal.js","utils/history.js","components/Instructions.js","components/Leaderboard.js","components/Menu.js","components/App.js","index.js","assets/background.png","assets/game-display-desktop.png","assets/rules.png","backgroundImage/background.png"],"names":["LinkButton","_ref","destination","message","_ref$action","action","customClass","react_default","a","createElement","className","concat","react_router_dom","to","onClick","Login","handleSubmit","e","_this","props","playerNameReady","handleNewPlayerFormSubmit","history","push","displayInvalidPlayerNameMessage","handleClick","addNewPlayerToFirebase","swal","_this2","this","onSubmit","htmlFor","type","id","value","playerName","onChange","handleChange","checkForPlayerNameReady","placeholder","components_LinkButton","Component","withRouter","PlayerOptionItem","state","squareDimension","getPlayerChoice","disableButtonDuringAnimation","updateDimensions","window","innerWidth","setState","addEventListener","squareStyle","width","height","disabled","tempDisabled","playerCards","style","src","image","alt","PlayerOptionList","setTimeout","roundResult","renderPlayerOptions","options","map","option","components_PlayerOptionItem","key","index","img","showCard","Card","renderVictoryMessage","winStatement","cardBackStyleSquare","backgroundImage","cardBack","backgroundSize","cardBackStyle","flipped","CardDisplay","playerCardFlipped","compCardFlipped","playerCardImage","compCardImage","playerChoice","compChoice","renderWinStatement","cards","includes","components_Card","resetGame","_ref$playerWinCount","playerWinCount","_ref$compWinCount","compWinCount","_ref$tieCount","tieCount","colSpan","CardTracker","compCardsArray","renderCounterList","deck","item","renderCounter","compCards","newArray","Object","entries","convertCompCardsArrayToObject","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","axios","create","baseURL","headers","Authorization","Game","compChoiceNumber","compChoiceArray","rock","paper","scissors","lizard","spock","cardImage","totalRounds","getCardImage","_callee","cardHolder","res","randomNumber","regenerator_default","wrap","_context","prev","next","unsplash","get","params","query","sent","Math","floor","random","data","results","length","urls","regular","defineProperty","stop","spendPlayerCard","getCompChoice","keys","resolveSetCompChoice","spendCompCard","newObject","cardsRemaining","caluculateResult","clearEmptyCardSlot","splice","compchoiceArray","updateCount","resolveRound","getTotalRounds","resetForNextRound","saveCurrentGameData","gameData","database","ref","child","set","then","snap","setRecoveryDataState","recoverCurrentGameData","once","snapshot","recoveredData","toJSON","restoreCurrentGame","win","lose","tie","triggerEndGame","renderAdmin","components_CardTracker","recoveryDataExists","components_PlayerOptionList","components_CardDisplay","Modal","ReactDOM","createPortal","onDismiss","stopPropagation","title","content","actions","document","querySelector","createBrowserHistory","Instructions","instruction","undefined","rulesDisplayed","querySelectorAll","forEach","trigger","classList","remove","target","add","dataset","toggleContent","renderActions","Fragment","goBack","showRules","gameRulesImage","renderMessage","showGameBoard","gameDisplayImage","renderContent","components_Modal","dbRef","Leaderboard","players","pullDataFromFirebase","playerList","values","sortPlayerList","sortedList","sort","b","renderRankings","player","data-label","name","Menu","App","windowWidth","windowHeight","updateWindow","innerHeight","testValue","preventDefault","newPlayer","updateFirebase","console","log","_React$createElement","backgroundImg","background","react_router","exact","path","components_Login","render","components_Game","components_Menu","components_Instructions","components_Leaderboard","Results","components_App","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.58d148f4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n//change - removed extra imports from rrd\nimport { Link } from \"react-router-dom\";\n\nconst LinkButton = ({ destination, message, action = null, customClass }) => {\n    return (\n        <div className={`linkButton ${customClass}`} >\n            <Link className=\"button__target\" to={destination} onClick={action} >{message || destination}</Link>\n        </div>\n    );\n};\n\nexport default LinkButton;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Redirect, withRouter } from \"react-router-dom\";\nimport swal from 'sweetalert';\n\nimport LinkButton from './LinkButton';\n\n\nclass Login extends Component {\n\n    handleSubmit = (e) => {\n        if (this.props.playerNameReady) {\n            this.props.handleNewPlayerFormSubmit(e)\n            this.props.history.push('/game');\n        } else {\n            this.displayInvalidPlayerNameMessage();\n        }\n    }\n\n    handleClick = () => {\n        if (this.props.playerNameReady) {\n            this.props.addNewPlayerToFirebase();\n        } else {\n            this.displayInvalidPlayerNameMessage();\n        }\n    }\n\n    displayInvalidPlayerNameMessage = () => {\n        swal(\"Oops!\", \"Looks like you need to enter a valid Nick Name!\", \"error\");\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"login\">\n                <h1>RPSLS</h1>\n                <form className=\"playerNameSubmissionForm\" action=\"#\" onSubmit={this.handleSubmit} >\n                    <label className=\"visuallyhidden\" htmlFor=\"playerName\">Please enter your nickname!</label>\n                    <input className=\"playerNameSubmissionForm__input\" type=\"text\" id=\"playerName\" value={this.props.playerName} onChange={(e) => this.props.handleChange(e, this.props.checkForPlayerNameReady)} placeholder=\"Enter a Nickname\" />\n                </form>\n                <div className=\"loginPageButtons\">\n                    <div className=\"loginPageButtons__buttonContainer\" onClick={this.handleClick}>\n                        <LinkButton destination={this.props.playerNameReady ? 'game' : '/'} message='Play Game' />\n                    </div>\n                    <div className=\"loginPageButtons__buttonContainer\">\n                        <LinkButton destination='instructions' />\n                    </div>\n                    <div className=\"loginPageButtons__buttonContainer\">\n                        <LinkButton destination='leaderboard' />\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n};\n\nexport default withRouter(Login);","import React, { Component } from \"react\";\n\nclass PlayerOptionItem extends Component{\n    \n    state = {squareDimension: 0}\n\n    componentDidMount() {\n        this.updateDimensions();\n        window.addEventListener(\"resize\", this.updateDimensions);\n    }\n\n    handleClick = () => {\n        this.props.getPlayerChoice(this.props.type);\n        this.props.disableButtonDuringAnimation();\n    }\n\n    \n    \n    updateDimensions = () => {\n        const windowSize = window.innerWidth;\n        const squareDimension = windowSize / 4.8;\n        this.setState({ squareDimension });\n    }\n\n\n    render() {\n        const squareStyle = {\n            width: this.state.squareDimension,\n            height: this.state.squareDimension\n        }\n\n        let disabled = false;\n        if (this.props.tempDisabled) {\n            disabled = true;\n        } else {\n            disabled = !this.props.playerCards[this.props.type];\n        }\n\n        return (\n            <button \n                className={`playerOptionItem`}  \n                onClick={this.handleClick} \n                style={window.innerWidth < 750 ? squareStyle : null} \n                disabled={disabled}>\n                <div>\n                    <img src={this.props.image} alt={this.props.alt} className={this.props.customClass}/>\n                </div>\n            </button>\n        );\n    }\n}\n\nexport default PlayerOptionItem;","import React, { Component } from \"react\";\n\nimport PlayerOptionItem from './PlayerOptionItem';\n\nclass PlayerOptionList extends Component {\n    state = {tempDisabled: false}\n    \n    disableButtonDuringAnimation = () => {\n        this.setState({ tempDisabled: true });\n        setTimeout((roundResult) => {\n            this.setState({ tempDisabled: false });\n        }, 3500);\n    }\n    \n    renderPlayerOptions = () => {\n        const playerOptions = this.props.options.map((option) => {\n                return (\n                    <PlayerOptionItem\n                        key={option.index}\n                        image={option.img}\n                        alt={option.alt}\n                        type={option.type}\n                        getPlayerChoice={this.props.getPlayerChoice}\n                        showCard={this.props.showCard}\n                        customClass={option.customClass}\n                        playerCards={this.props.playerCards}\n                        disableButtonDuringAnimation={this.disableButtonDuringAnimation}\n                        tempDisabled={this.state.tempDisabled}\n                    />\n                );     \n            });\n        return playerOptions\n    } \n\n\n    render() {\n        return (\n            <div className=\"playerOptionList\">\n                {this.renderPlayerOptions()}\n            </div>\n        );\n    }\n};\n\n\nexport default PlayerOptionList;\n","import React, { Component } from \"react\";\n\nimport cardBack from '../assets/background.png';\n\nclass Card extends Component {\n    state = {squareDimension: 0}\n\n    componentDidMount() {\n        this.updateDimensions()\n        window.addEventListener(\"resize\", this.updateDimensions);\n    }\n\n    updateDimensions = () => {\n        const windowSize = window.innerWidth;\n        const squareDimension = windowSize / 1.8;\n        this.setState({ squareDimension });\n    }\n\n    renderVictoryMessage = () => {\n        return (\n            <div className=\"card__victoryMessage\">\n                {this.props.winStatement}\n            </div>\n        );\n    }\n\n    render() {\n        const squareStyle = {\n            width: this.state.squareDimension,\n            height: this.state.squareDimension\n        }\n\n        const cardBackStyleSquare = {\n            backgroundImage: `url(${cardBack})`,\n            backgroundSize: `500%`,\n            width: this.state.squareDimension,\n            height: this.state.squareDimension\n        }\n\n        const cardBackStyle = {\n            backgroundImage: `url(${cardBack})`,\n            backgroundSize: 'cover'\n        }\n        \n        return (\n            <div \n                className=\"card\" \n                style={window.innerWidth < 750 ? squareStyle : null} \n            >\n                <div \n                    className={`card__cardFlipper ${this.props.flipped ? 'card__cardFlipper--active' : ''}`} \n                    style={window.innerWidth < 750 ? squareStyle : null} \n                >\n                    <div \n                        className={`card__display card__display--back`} \n                        style={window.innerWidth < 750 ? cardBackStyleSquare : cardBackStyle}\n                    >\n                        {/* <img src={cardBack} alt='image for the back of the card' /> */}\n                    </div>\n                    <div \n                        className={`card__display card__display--front`} \n                        style={window.innerWidth < 750 ? squareStyle : null} \n                >\n                        <img src={this.props.image} alt='played card image' />\n                        {/* {setTimeout(() => {this.renderVictoryMessage()}, 500)} */}\n                        {this.renderVictoryMessage()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React, { Component } from \"react\";\n\nimport Card from './Card';\n\nconst CardDisplay = ({ \n    playerCardFlipped, \n    compCardFlipped, \n    playerCardImage, \n    compCardImage, \n    playerChoice, \n    compChoice, \n    roundResult \n    }) => {\n    \n    \n\n    const renderWinStatement = () => {\n        const cards = [];\n        cards.push(playerChoice, compChoice);\n        if (cards.includes('rock') && cards.includes('paper')) {\n            return 'Paper covers rock';\n        } else if (cards.includes('rock') && cards.includes('scissors')) {\n            return 'Rock smashes scissors';\n        } else if (cards.includes('rock') && cards.includes('lizard')) {\n            return 'Rock crushes lizard';\n        } else if (cards.includes('rock') && cards.includes('spock')) {\n            return 'Spock vaporizes rock';\n        } else if (cards.includes('paper') && cards.includes('scissors')) {\n            return 'Scissors cut paper';\n        } else if (cards.includes('paper') && cards.includes('lizard')) {\n            return 'Lizard eats paper';\n        } else if (cards.includes('paper') && cards.includes('spock')) {\n            return 'Paper disproves spock';\n        } else if (cards.includes('scissors') && cards.includes('lizard')) {\n            return 'Scissors decapitate lizard';\n        } else if (cards.includes('scissors') && cards.includes('spock')) {\n            return 'Spock smashes scissors';\n        } else if (cards.includes('lizard') && cards.includes('spock')) {\n            return 'Lizard bites spock';\n        }\n    }   \n    \n    return (\n        <div className=\"cardDisplay\">\n            <Card \n                flipped={playerCardFlipped}\n                image={playerCardImage}\n                winStatement={roundResult === 'Win' ? renderWinStatement() : null}\n            />\n            <Card \n                flipped={compCardFlipped}\n                image={compCardImage}\n                winStatement={roundResult === 'Lose' ? renderWinStatement() : null}\n            />\n        </div>\n    );\n\n};\n\nexport default CardDisplay;\n","import React, { Component } from \"react\";\nimport { withRouter } from 'react-router-dom'\n\nimport LinkButton from './LinkButton';\n\nconst Result = ({ resetGame, playerWinCount=0, compWinCount=0, tieCount=0, playerName, history }) => {\n    if (!playerName) {\n        history.push('/');\n    }\n    return (\n        <div className=\"results\">\n            <table className=\"ui celled large table padded unstackable\">\n                <thead>\n                    <tr>\n                        <th colSpan=\"2\" className=\"center aligned\">{playerName}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>Games Won</td>\n                        <td className=\"center aligned\">{playerWinCount}</td>\n                    </tr>\n                    <tr>\n                        <td>Games Lost</td>\n                        <td className=\"center aligned\">{compWinCount}</td>\n                    </tr>\n                    <tr>\n                        <td>Games Tied</td>\n                        <td className=\"center aligned\">{tieCount}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <LinkButton destination={\"/\"} message={'New Game'} action={resetGame} />\n            <LinkButton destination={\"/leaderboard\"} message={'Leaderboard'} />\n        </div>\n    );\n}\n\n\n\nexport default withRouter(Result);\n","\n\nconst options = [\n    {\n        type: 'rock',\n        img: 'assets/rock.png',\n        alt: 'Image of a hand in a fist, indicating rock!',\n        index: 0,\n        customClass: 'rockClass'\n    },\n    {\n        type: 'paper',\n        img: 'assets/paper.png',\n        alt: 'Image of a flat hand, indicating paper!',\n        index: 1,\n        customClass: 'paperClass'\n    },\n    {\n        type: 'scissors',\n        img: 'assets/scissors.png',\n        alt: 'Image of a hand with two fingers out, indicating scissors!',\n        index: 2,\n        customClass: 'scissorsClass'\n    },\n    {\n        type: 'lizard',\n        img: 'assets/lizard.png',\n        alt: 'Image of a hand forming a mouth, indicating lizard!',\n        index: 3,\n        customClass: 'lizardClass'\n    },\n    {\n        type: 'spock',\n        img: 'assets/spock.png',\n        alt: 'Image of a hand giving the Vulcan salute, indicating spock!',\n        index: 4,\n        customClass: 'spockClass'\n    }\n]\n\nexport default options;","import React, { Component } from \"react\";\n\nimport options from '../utils/options';\n\n\nconst CardTracker = ({ compCardsArray, playerCards, playerWinCount, compWinCount, tieCount }) => {\n\n    const renderCounter = (deck, type) => {\n        const list = options.map((item, index) => {\n            return (\n                <div \n                    key={index} \n                    className={`bubble ${deck[type] >= (index + 1) ? 'filled ' : ''}`}\n                >\n                </div>\n            );\n        });\n        return list;\n    }\n\n    const renderCounterList = (deck) => {\n        const list = options.map(option => {\n            return (\n                <div className=\"listItem\" key={option.type}>\n                    <div className=\"listItem__image\">\n                        <img src={option.img} alt={option.alt}/>\n                    </div>\n                    <div className=\"listItem__counter\">\n                        {renderCounter(deck, option.type)}\n                    </div>\n                </div>\n            );\n        });\n        return list;\n    }\n\n    const convertCompCardsArrayToObject = () => {\n        const compCards = {};\n        compCardsArray.map(item => {\n            const newArray = Object.entries(item);\n            compCards[newArray[0][0]] = newArray[0][1];\n        });\n        return compCards;\n    }\n    \n    return (\n        <div className=\"cardTracker\">                \n            <div className=\"counterList\">\n                {renderCounterList(playerCards)}\n            </div>\n            <div className=\"counterList\">\n                {renderCounterList(convertCompCardsArrayToObject())}\n            </div>\n            <div className=\"score\">\n                <div className=\"score__row\">\n                    <div className=\"score__cell score__cell--heading\">Wins</div>\n                    <div className=\"score__cell\">{playerWinCount}</div>\n                </div>\n                <div className=\"score__row\">\n                    <div className=\"score__cell score__cell--heading\">Loses</div>\n                    <div className=\"score__cell\">{compWinCount}</div>\n                </div>\n                <div className=\"score__row\">\n                    <div className=\"score__cell score__cell--heading\">Ties</div>\n                    <div className=\"score__cell\">{tieCount}</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default CardTracker;","import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyCr6cQFXFwCYl7-ClBTIAK6H6MhS6XNkC8\",\n    authDomain: \"new-rpsls.firebaseapp.com\",\n    databaseURL: \"https://new-rpsls.firebaseio.com\",\n    projectId: \"new-rpsls\",\n    storageBucket: \"new-rpsls.appspot.com\",\n    messagingSenderId: \"783810961248\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase;","import axios from 'axios';\n\n\nexport default axios.create({\n    baseURL: 'https://api.unsplash.com/',\n    headers: {\n        Authorization: 'Client-ID 630c588d9c659156e3aeb6db866809578dadb2520e92e3eaaa7d6c58a069053a'\n    }\n});","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link, withRouter } from \"react-router-dom\";\n\nimport PlayerOptionList from './PlayerOptionList';\nimport CardDisplay from './CardDisplay';\n//change - import not needed\n// import Button from './Button';\nimport RoundResult from './Results';\nimport CardTracker from './CardTracker';\nimport LinkButton from \"./LinkButton\";\nimport Login from './Login';\n\nimport options from '../utils/options';\nimport firebase from '../database/firebase/firebase';\nimport unsplash from '../api/unsplash';\n\n\nconst compChoiceArray = [\n    {rock: 5},\n    {paper: 5},\n    {scissors: 5},\n    {lizard: 5},\n    {spock: 5},\n]\n\nclass Game extends Component {\n    state = { \n        options, \n        playerCardFlipped: false,\n        compCardFlipped: false,\n        playerChoice: '',\n        compChoice: '',\n        compChoiceNumber: '',\n        compChoiceArray: [\n            { rock: 5 },\n            { paper: 5 },\n            { scissors: 5 },\n            { lizard: 5 },\n            { spock: 5 },\n        ],\n        playerCards: {\n            rock: 5,\n            paper: 5,\n            scissors: 5,\n            lizard: 5,\n            spock: 5\n        },\n        cardImage: \"\",\n        playerCardImage: '',\n        compCardImage: '',\n        playerWinCount: 0,\n        compWinCount: 0,\n        tieCount: 0,\n        roundResult: '',\n        totalRounds: 0,\n    }\n\n    componentDidMount(){\n        if (this.props.recoveryDataExists) {\n            this.recoverCurrentGameData();\n        }\n        if (!this.props.playerName) {\n            this.props.history.push('/');\n        }\n    }\n\n    getCardImage = async (type, cardHolder) => {\n        if (type === 'spock') {\n            type = 'space';\n        }\n        const res = await unsplash.get('search/photos', {\n            params: { \n                query: type, \n                // orientation: 'squarish' \n            },\n        });\n        const randomNumber = Math.floor(Math.random() * res.data.results.length);\n        const cardImage = res.data.results[randomNumber].urls.regular;\n        this.setState({ [`${cardHolder}CardImage`]: cardImage }, () => this.showCard(`${cardHolder}`));\n    }\n\n    showCard = (cardHolder) => this.setState({ [`${cardHolder}CardFlipped`]: true });\n    \n    getPlayerChoice = (playerChoice) => this.setState({ playerChoice }, () => {\n        this.getCardImage(this.state.playerChoice, 'player');\n        this.spendPlayerCard();\n        this.getCompChoice();\n    });\n\n\n    getCompChoice = () => {\n        setTimeout(() => {\n            let compChoiceNumber = Math.floor(Math.random() * this.state.compChoiceArray.length);\n            const compChoice = Object.keys(this.state.compChoiceArray[compChoiceNumber])[0];\n            this.setState({ compChoice, compChoiceNumber }, () => {this.resolveSetCompChoice()});\n        }, 1000)\n    }\n\n    resolveSetCompChoice = () => {\n        this.spendCompCard();\n        this.getCardImage(this.state.compChoice, 'comp');\n    }\n\n    spendPlayerCard = () => {\n        const newObject = this.state.playerCards;\n        newObject[this.state.playerChoice] = newObject[this.state.playerChoice] - 1;\n        this.setState({ playerCards: newObject });\n    }\n\n    spendCompCard = () => {\n        const newArray = this.state.compChoiceArray;\n        newArray[this.state.compChoiceNumber][this.state.compChoice]--;\n        const cardsRemaining = newArray[this.state.compChoiceNumber][this.state.compChoice];\n        this.setState({ compChoiceArray: newArray }, () => this.caluculateResult(this.state.playerChoice, this.state.compChoice));\n        if (cardsRemaining === 0) {this.clearEmptyCardSlot()}; \n    }\n\n    clearEmptyCardSlot = () => {\n        const newArray = this.state.compChoiceArray;\n        newArray.splice(this.state.compChoiceNumber, 1);\n        this.setState({ compchoiceArray: newArray });\n    }\n    \n    \n\n    caluculateResult = (playerChoice, compChoice) => {\n        if (playerChoice && compChoice) {\n            if (((playerChoice === \"rock\") && (compChoice === \"scissors\"))\n                || ((playerChoice === \"rock\") && (compChoice === \"lizard\"))\n                || ((playerChoice === \"paper\") && (compChoice === \"rock\"))\n                || ((playerChoice === \"paper\") && (compChoice === \"spock\"))\n                || ((playerChoice === \"scissors\") && (compChoice === \"paper\"))\n                || ((playerChoice === \"scissors\") && (compChoice === \"lizard\"))\n                || ((playerChoice === \"spock\") && (compChoice === \"rock\"))\n                || ((playerChoice === \"spock\") && (compChoice === \"scissors\"))\n                || ((playerChoice === \"lizard\") && (compChoice === \"paper\"))\n                || ((playerChoice === \"lizard\") && (compChoice === \"spock\"))) {\n                this.props.updateCount('win');\n                this.setState({\n                    playerWinCount: this.state.playerWinCount + 1,\n                    roundResult: 'Win'\n                }, () => this.resolveRound('Win'));\n            } else if (this.state.playerChoice === this.state.compChoice) {\n                this.props.updateCount('tie');\n                this.setState({\n                    tieCount: this.state.tieCount + 1,\n                    roundResult: 'Tie'\n                }, () => this.resolveRound('Tie'));\n            } else {\n                this.props.updateCount('lose');\n                this.setState({\n                    compWinCount: this.state.compWinCount + 1,\n                    roundResult: 'Lose'\n                }, () => this.resolveRound('Lose'));\n            }\n        }\n    }\n\n    resolveRound = (roundResult) => {\n        setTimeout((roundResult) => {\n            this.getTotalRounds();\n            this.resetForNextRound();\n            // this.setRoundResult(roundResult);\n        }, 2000);\n    }\n\n    getTotalRounds = () => {\n        const totalRounds = (this.state.compWinCount + this.state.playerWinCount + this.state.tieCount);\n        this.setState({ totalRounds });\n    };\n\n    // setRoundResult = (roundResult) => {\n    //     this.setState({ roundResult });\n    // }\n\n    saveCurrentGameData = () => {\n        const gameData = {\n            compChoiceArray: this.state.compChoiceArray,\n            playerCards: this.state.playerCards,\n        }\n        firebase.database().ref().child(this.props.id).child('recoveryData').set(gameData).then((snap) => {\n            this.props.setRecoveryDataState();\n        });\n    }\n\n    recoverCurrentGameData = () => {\n        firebase.database().ref().child(this.props.id).child('recoveryData').once('value').then((snapshot) => {\n            const recoveredData = snapshot.toJSON();\n            this.restoreCurrentGame(recoveredData);\n        });\n    }\n\n    restoreCurrentGame = (data) => {\n        const compChoiceArray = []\n        for (let key in data.compChoiceArray) {\n            compChoiceArray.push(data.compChoiceArray[key])\n        }\n        this.setState({\n            compChoiceArray,\n            playerCards: data.playerCards,\n            playerWinCount: this.props.win,\n            compWinCount: this.props.lose,\n            tieCount: this.props.tie,\n        });\n    }\n\n\n    triggerEndGame = (totalRounds) => {\n        if (totalRounds === 25) {\n            this.props.history.push('/results');\n        }\n    }\n\n\n    resetForNextRound = () => {\n        this.saveCurrentGameData();\n        this.setState({\n            playerCardFlipped: false,\n            compCardFlipped: false,\n            playerChoice: '',\n            compChoice: '',\n            compChoiceNumber: '',\n            roundResult: ''\n        }, () => this.triggerEndGame(this.state.totalRounds));\n    }\n\n    renderAdmin = () => {\n        return (\n            <div className=\"adminArea\">\n                <CardTracker\n                    playerCards={this.state.playerCards}\n                    compCardsArray={this.state.compChoiceArray}\n                    playerWinCount={this.state.playerWinCount}\n                    compWinCount={this.state.compWinCount}\n                    tieCount={this.state.tieCount}\n            />\n                <LinkButton \n                    destination={'menu'} \n                    action={this.saveCurrentGameData} \n                    message={<i className=\"fas fa-bars\"></i>} \n                    customClass={'menu'}\n                />\n            </div>\n        );\n    }\n    \n\n\n\n    render(){\n        return (\n            <div className=\"game\">\n                <div className=\"game__cardArea\">\n                    <PlayerOptionList \n                        options={options} \n                        getPlayerChoice={this.getPlayerChoice}\n                        playerCards={this.state.playerCards}\n                    />\n                    <div className=\"cardDisplayContainer\">\n                        <CardDisplay \n                            options={options} \n                            playerCardFlipped={this.state.playerCardFlipped}\n                            compCardFlipped={this.state.compCardFlipped}\n                            playerChoice={this.state.playerChoice}\n                            compChoice={this.state.compChoice}\n                            playerCardImage={this.state.playerCardImage}\n                            compCardImage={this.state.compCardImage}\n                            roundResult={this.state.roundResult}\n                    />\n                        {window.innerWidth < 750 ? null : this.renderAdmin()}\n                    </div>\n                </div>\n                {window.innerWidth < 750 ? this.renderAdmin() : null}\n            </div>\n        );\n    }\n}\n\n\n\nexport default withRouter(Game);","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\n\n\nconst Modal = props => {\n\n    \n    return ReactDOM.createPortal(\n        <div onClick={props.onDismiss} className=\"ui dimmer modals visible active\">\n            <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\n                <div className=\"ui huge header\">{props.title}</div>\n                <div className=\"content maxedHeight\">{props.content}</div>\n                <div className=\"actions\">{props.actions}</div>\n            </div>\n        </div>,\n        document.querySelector('#modal')\n    );\n};\n\n\nexport default Modal;","import { createBrowserHistory } from 'history';\nexport default createBrowserHistory();","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\n\nimport Modal from './Modal';\nimport history from '../utils/history';\n\nimport gameDisplayImage from '../assets/game-display-desktop.png';\nimport gameRulesImage from '../assets/rules.png';\n\n\nclass Instructions extends Component {\n    state = {\n        instruction: undefined,\n        rulesDisplayed: false\n    }\n\n    handleClick = (e) => {\n        const triggers = document.querySelectorAll('.interactiveOverlay__trigger');\n        triggers.forEach(trigger => trigger.classList.remove('active'));\n        e.target.classList.add('active');\n        this.setState({ instruction: e.target.dataset.instruction });\n    }\n\n    toggleContent = () => {\n        this.setState({ rulesDisplayed: !this.state.rulesDisplayed });\n    }\n    \n\n    renderActions = () => {\n        return (\n            <React.Fragment>\n                <button \n                    onClick={this.toggleContent}\n                    className=\"ui button primary massive\"\n                >\n                    {this.state.rulesDisplayed ? 'Show Gameboard' : 'Show Rules'}\n                </button>\n                <button onClick={() => history.goBack()} className=\"ui button primary massive\">Back</button>\n            </React.Fragment>\n        );\n    }\n\n    showRules = () => {\n        return (\n            <div className=\"ruleContent\">\n                <div className=\"ruleImage\">\n                    <img src={gameRulesImage} alt=\"Image showing the rules for RPSLS\"/>\n                </div>\n            </div>\n        );\n    }\n\n    renderMessage = () => {\n        switch (this.state.instruction) {\n            case 'options':\n                return <div className=\"ui green message large\">Begin each round by choosing which card your are going to play.</div>\n            case 'userCard':\n                return <div className=\"ui green message large\">Cards you play will be displayed here.</div>\n            case 'compCard':\n                return <div className=\"ui green message large\">Cards the computer plays will be displayed here.</div>\n            case 'cardTracker':\n                return <div className=\"ui green message large\">Keep track of the remaining cards in your deck and your opponents deck using this tracker.</div>\n            case 'scoreTracker':\n                return <div className=\"ui green message large\">Track your current score here.</div>\n            case 'menu':\n                return <div className=\"ui green message large\">Navigate to the menu for more actions.</div>\n            default: \n                return;\n        }\n    }\n\n    showGameBoard = () => {\n        return (\n            <div className=\"instructionContent\">\n                <div className=\"ui big message large\">\n                    Interact with the game for more information.\n                </div>\n                <div className=\"instructions\">\n                    <div className=\"gameDisplay\">\n                        <img src={gameDisplayImage} alt=\"Image of gameboard.\"/>\n                        {/* <div className=\"interactiveOverlay\">\n                            <div \n                                onClick={(e) => this.handleClick(e)} \n                                className=\"interactiveOverlay__trigger interactiveOverlay__trigger--options\"\n                                data-instruction=\"options\"\n                            ></div>\n                            <div className=\"interactiveOverlay__container\">\n                                <div className=\"interactiveOverlay__cardDisplay\">\n                                    <div \n                                        onClick={(e) => this.handleClick(e)} \n                                        className=\"interactiveOverlay__trigger interactiveOverlay__trigger--userCard\"\n                                        data-instruction=\"userCard\"\n                                    ></div>\n                                    <div \n                                        onClick={(e) => this.handleClick(e)} \n                                        className=\"interactiveOverlay__trigger interactiveOverlay__trigger--compCard\"\n                                        data-instruction=\"compCard\"\n                                    ></div>\n                                </div>\n                                <div className=\"interactiveOverlay__adminArea\">\n                                    <div \n                                        onClick={(e) => this.handleClick(e)} \n                                        className=\"interactiveOverlay__trigger interactiveOverlay__trigger--cardTracker\"\n                                        data-instruction=\"cardTracker\"\n                                    ></div>\n                                    <div \n                                        onClick={(e) => this.handleClick(e)} \n                                        className=\"interactiveOverlay__trigger interactiveOverlay__trigger--scoreTracker\"\n                                        data-instruction=\"scoreTracker\"\n                                    ></div>\n                                    <div \n                                        onClick={(e) => this.handleClick(e)} \n                                        className=\"interactiveOverlay__trigger interactiveOverlay__trigger--menu\"\n                                        data-instruction=\"menu\"\n                                    ></div>\n                                </div>\n                            </div>\n                        </div> */}\n                    </div>\n                </div>\n                {this.renderMessage()}\n            </div>\n        );\n    }\n\n    renderContent = () => {\n        if (!this.state.rulesDisplayed) {\n            return this.showGameBoard();\n        } else {\n            return this.showRules();\n        };\n    };\n\n    render() {\n        return (\n            <Modal\n                title=\"Instructions\"\n                content={this.renderContent()}\n                actions={this.renderActions()}\n                onDismiss={() => history.goBack()}\n            />\n        );\n    }\n};\n\nexport default Instructions;","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\n\nimport firebase from '../database/firebase/firebase';\n\nimport Modal from './Modal';\nimport history from '../utils/history';\n\nconst dbRef = firebase.database().ref();\n\nclass Leaderboard extends Component {\n\n    state={ players: [] }\n\n    componentDidMount(){\n        this.pullDataFromFirebase();\n    }\n    \n    pullDataFromFirebase = () => {\n        dbRef.once('value').then((snapshot) => {\n            const playerList = Object.values(snapshot.toJSON());\n            this.sortPlayerList(playerList);\n        });\n    }\n\n    sortPlayerList = (playerList) => {\n        const sortedList = playerList.sort((a, b) => {\n            if (a.win < b.win) return 1;\n            if (a.win > b.win) return -1;\n            if (a.win === b.win && a.lose > b.lose) return 1;\n            if (a.win === b.win && a.lose < b.lose) return -1;\n        });\n        // console.log(sortedList);\n        this.setState({ players: sortedList });\n    }\n\n    renderRankings = () => {\n        const list = this.state.players.map((player, index) => {\n            if ((player.win + player.lose + player.tie) === 25) {\n                return (\n                    <tr key={index}>\n                        <td data-label=\"Rank\">{index + 1}</td>\n                        <td data-label=\"Name\">{player.name}</td>\n                        <td data-label=\"Wins\">{player.win}</td>\n                        <td data-label=\"Loses\">{player.lose}</td>\n                    </tr>\n                )\n            }\n        });\n        return list;\n    }\n\n    renderContent = () => { \n        return (\n            <div className=\"leaderboard\">\n                <table className=\"ui celled large table unstackable\">\n                    <thead>\n                        <tr>\n                            <th className=\"rankColumn\">Rank</th>\n                            <th>Name</th>\n                            <th>Wins</th>\n                            <th>Loses</th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"rankList\">\n                        {this.renderRankings()}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    renderActions = () => {\n        return (\n            <React.Fragment>\n                <button onClick={() => history.goBack()} className=\"ui button primary massive\">Back</button>\n            </React.Fragment>\n        );\n    }\n\n\n\n    render(){\n        return (\n            <Modal\n                title=\"Leaderboard\"\n                content={this.renderContent()}\n                actions={this.renderActions()}\n                onDismiss={() => history.goBack()}\n            />\n        );\n    }\n};\n\nexport default Leaderboard;","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\n\nimport Modal from './Modal';\nimport LinkButton from './LinkButton';\n\nimport history from '../utils/history';\n\nconst Menu = ({ recoverCurrentGameData, resetGame }) => {\n\n    const renderContent = () => {\n        return (\n            <div className=\"menu\">\n                <div className=\"menuOptions\">\n                    <LinkButton destination={\"/\"} message={'New Game'} action={resetGame} />\n                    <LinkButton destination={\"/instructions\"} message={'Instructions'}/>\n                    <LinkButton destination={\"/leaderboard\"} message={'Leaderboard'} />\n                </div>\n            </div>\n        )\n    }\n\n    const renderActions = () => {\n        return (\n            <React.Fragment>\n                <Link to=\"/game\" className=\"ui button primary massive\">Back</Link>\n            </React.Fragment>\n        );\n    }\n\n\n\n\n    return (\n        <Modal\n            title=\"Menu\"\n            content={renderContent()}\n            actions={renderActions()}\n            onDismiss={() => history.goBack()}\n        />\n    )\n}\n\n\nexport default Menu;","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\n\nimport Login from './Login';\nimport Game from './Game';\nimport Instructions from './Instructions';\nimport Leaderboard from './Leaderboard';\nimport Menu from './Menu';\nimport Results from './Results';\n\nimport background from '../backgroundImage/background.png';\nimport options from '../utils/options';\nimport firebase from '../database/firebase/firebase';\nimport history from '../utils/history';\n\n\nconst dbRef = firebase.database().ref();\n\nclass App extends Component {\n    state = {\n        playerName: '',\n        playerNameReady: false,\n        tie: 0,\n        win: 0,\n        lose: 0,\n        id: '',\n        windowWidth: 0,\n        windowHeight: 0,\n        recoveryDataExists: false,\n    }\n\n    componentDidMount() {\n        this.updateWindow();\n        window.addEventListener(\"resize\", this.updateWindow);\n    }\n\n    updateWindow = () => {\n        this.setState({\n            windowWidth: window.innerWidth,\n            windowHeight: window.innerHeight\n        });\n    }\n\n    handleChange = (e, testValue) => {\n        this.setState({ [e.target.id]: e.target.value }, () => testValue());\n    }\n\n    checkForPlayerNameReady = () => {\n        if (\n            this.state.playerName !== \"Enter a nickname\"\n            && this.state.playerName !== \"\"\n            && this.state.playerName !== \" \"\n            && this.state.playerName !== \"  \"\n            && this.state.playerName !== \"   \"\n        ) {\n            this.setState({ playerNameReady: true });\n        } else {\n            this.setState({ playerNameReady: false });\n        }\n    }\n\n    handleNewPlayerFormSubmit = (e) => {\n        e.preventDefault();\n        this.addNewPlayerToFirebase();\n    }\n\n    addNewPlayerToFirebase = () => {\n        const newPlayer = {\n            name: this.state.playerName,\n            win: this.state.win,\n            lose: this.state.lose,\n            tie: this.state.tie\n        }\n        dbRef.push(newPlayer).then((snap) => {\n            this.setState({ id: snap.key });\n        });\n    }\n\n    updateFirebase = (type) => {\n        dbRef.child(this.state.id).child(type).set(this.state[type]);\n    }\n\n    updateCount = (type) => {\n        this.setState({ [type]: this.state[type] + 1 }, () => this.updateFirebase(type));\n    }\n\n    setRecoveryDataState = () => {\n        this.setState({ recoveryDataExists: true });\n    }\n\n    resetGame = () => {\n        console.log('run');\n        this.setState({\n            playerName: '',\n            playerNameReady: false,\n            tie: 0,\n            win: 0,\n            lose: 0,\n            id: '',\n            recoveryDataExists: '',\n        });\n    }\n\n    render() {\n        const backgroundImg = {\n            backgroundImage: `linear-gradient(to bottom, rgba(205, 169, 157, 0.7), rgba(205, 169, 157, 0.7)), url(${background})`\n        }\n        return (\n            // <div>App</div>\n            <div className=\"app\" style={backgroundImg}>\n                <div className=\"appWrapper\">\n                    <Route exact path=\"/\" exact render={(props) => (\n                        <Login\n                            history={history}\n                            playerName={this.state.playerName}\n                            playerNameReady={this.state.playerNameReady}\n                            handleChange={this.handleChange}\n                            handleNewPlayerFormSubmit={this.handleNewPlayerFormSubmit}\n                            addNewPlayerToFirebase={this.addNewPlayerToFirebase}\n                            checkForPlayerNameReady={this.checkForPlayerNameReady}\n                        />)}\n                    />\n                    <Route path=\"/game\" exact render={(props) => (\n                        <Game\n                            history={history}\n                            playerName={this.state.playerName}\n                            updateCount={this.updateCount}\n                            windowWidth={this.state.windowWidth}\n                            windowHeight={this.state.windowHeight}\n                            id={this.state.id}\n                            setRecoveryDataState={this.setRecoveryDataState}\n                            tie={this.state.tie}\n                            win={this.state.win}\n                            lose={this.state.lose}\n                            recoveryDataExists={this.state.recoveryDataExists}\n                        />)}\n                    />\n                    <Route path=\"/menu\" exact render={(props) => (\n                        <Menu\n                            recoverCurrentGameData={this.recoverCurrentGameData}\n                            resetGame={this.resetGame}\n                        />)}\n                    />\n                    <Route path=\"/instructions\" exact render={(props) => (<Instructions />)} />\n                    <Route path=\"/leaderboard\" exact render={(props) => (<Leaderboard />)} />\n                    <Route path=\"/results\" exact render={(props) => (\n                        <Results\n                            resetGame={this.resetGame}\n                            tieCount={this.state.tie}\n                            playerWinCount={this.state.win}\n                            compWinCount={this.state.lose}\n                            playerName={this.state.playerName}\n                            history={history}\n                        />)}\n                    />\n                </div>\n            </div>\n        );\n    };\n}\n\n\nexport default App;","import './styles/App.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from \"react-router-dom\";\n\nimport App from './components/App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.ce8f19bd.png\";","module.exports = __webpack_public_path__ + \"static/media/game-display-desktop.bb089555.png\";","module.exports = __webpack_public_path__ + \"static/media/rules.84b86c01.png\";","module.exports = __webpack_public_path__ + \"static/media/background.ce8f19bd.png\";"],"sourceRoot":""}