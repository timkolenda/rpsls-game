{"version":3,"sources":["components/LinkButton.js","components/Login.js","components/Game.js","components/Modal.js","utils/history.js","components/Instructions.js","database/firebase/firebase.js","components/Leaderboard.js","components/Menu.js","components/Results.js","components/App.js","index.js","backgroundImage/background.png"],"names":["LinkButton","_ref","destination","message","_ref$action","action","customClass","react_default","a","createElement","className","concat","react_router_dom","to","onClick","Login","handleSubmit","e","_this","props","playerNameReady","handleNewPlayerFormSubmit","history","push","displayInvalidPlayerNameMessage","handleClick","addNewPlayerToFirebase","swal","_this2","this","onSubmit","htmlFor","type","id","value","playerName","onChange","handleChange","checkForPlayerNameReady","placeholder","components_LinkButton","Component","withRouter","Game","Modal","ReactDOM","createPortal","onDismiss","stopPropagation","title","content","actions","document","querySelector","createBrowserHistory","Instructions","state","instruction","undefined","rulesDisplayed","querySelectorAll","forEach","trigger","classList","remove","target","add","setState","dataset","toggleContent","renderActions","Fragment","goBack","showRules","src","process","alt","renderMessage","showGameBoard","data-instruction","renderContent","components_Modal","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","dbRef","database","ref","Leaderboard","players","pullDataFromFirebase","once","then","snapshot","playerList","Object","values","toJSON","sortPlayerList","sortedList","sort","b","win","lose","renderRankings","map","player","index","tie","key","data-label","name","Menu","Results","App","windowWidth","windowHeight","recoveryDataExists","updateWindow","window","innerWidth","innerHeight","testValue","defineProperty","preventDefault","newPlayer","snap","updateFirebase","child","set","updateCount","setRecoveryDataState","resetGame","addEventListener","_React$createElement","backgroundImg","backgroundImage","background","style","react_router","exact","path","components_Login","render","components_Game","components_Menu","components_Instructions","components_Leaderboard","components_Results","components_App","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c9add101.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n//change - removed extra imports from rrd\nimport { Link } from \"react-router-dom\";\n\nconst LinkButton = ({ destination, message, action = null, customClass }) => {\n    return (\n        <div className={`linkButton ${customClass}`} >\n            <Link className=\"button__target\" to={destination} onClick={action} >{message || destination}</Link>\n        </div>\n    );\n};\n\nexport default LinkButton;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Redirect, withRouter } from \"react-router-dom\";\nimport swal from 'sweetalert';\n\nimport LinkButton from './LinkButton';\n\n\nclass Login extends Component {\n\n    handleSubmit = (e) => {\n        if (this.props.playerNameReady) {\n            this.props.handleNewPlayerFormSubmit(e)\n            this.props.history.push('/game');\n        } else {\n            this.displayInvalidPlayerNameMessage();\n        }\n    }\n\n    handleClick = () => {\n        if (this.props.playerNameReady) {\n            this.props.addNewPlayerToFirebase();\n        } else {\n            this.displayInvalidPlayerNameMessage();\n        }\n    }\n\n    displayInvalidPlayerNameMessage = () => {\n        swal(\"Oops!\", \"Looks like you need to enter a valid Nick Name!\", \"error\");\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"login\">\n                <h1>RPSLS</h1>\n                <form className=\"playerNameSubmissionForm\" action=\"#\" onSubmit={this.handleSubmit} >\n                    <label className=\"visuallyhidden\" htmlFor=\"playerName\">Please enter your nickname!</label>\n                    <input className=\"playerNameSubmissionForm__input\" type=\"text\" id=\"playerName\" value={this.props.playerName} onChange={(e) => this.props.handleChange(e, this.props.checkForPlayerNameReady)} placeholder=\"Enter a Nickname\" />\n                </form>\n                <div className=\"loginPageButtons\">\n                    <div className=\"loginPageButtons__buttonContainer\" onClick={this.handleClick}>\n                        <LinkButton destination={this.props.playerNameReady ? 'game' : '/'} message='Play Game' />\n                    </div>\n                    <div className=\"loginPageButtons__buttonContainer\">\n                        <LinkButton destination='instructions' />\n                    </div>\n                    <div className=\"loginPageButtons__buttonContainer\">\n                        <LinkButton destination='leaderboard' />\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n};\n\nexport default withRouter(Login);","import React, { Component } from \"react\";\n\nconst Game = () => {\n    return <div>Game</div>;\n}\n\nexport default Game;","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\n\n\nconst Modal = props => {\n\n    \n    return ReactDOM.createPortal(\n        <div onClick={props.onDismiss} className=\"ui dimmer modals visible active\">\n            <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\n                <div className=\"ui huge header\">{props.title}</div>\n                <div className=\"content maxedHeight\">{props.content}</div>\n                <div className=\"actions\">{props.actions}</div>\n            </div>\n        </div>,\n        document.querySelector('#modal')\n    );\n};\n\n\nexport default Modal;","import { createBrowserHistory } from 'history';\nexport default createBrowserHistory();","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\n\nimport Modal from './Modal';\nimport history from '../utils/history';\n\n\nclass Instructions extends Component {\n    state = {\n        instruction: undefined,\n        rulesDisplayed: false\n    }\n\n    handleClick = (e) => {\n        const triggers = document.querySelectorAll('.interactiveOverlay__trigger');\n        triggers.forEach(trigger => trigger.classList.remove('active'));\n        e.target.classList.add('active');\n        this.setState({ instruction: e.target.dataset.instruction });\n    }\n\n    toggleContent = () => {\n        this.setState({ rulesDisplayed: !this.state.rulesDisplayed });\n    }\n    \n\n    renderActions = () => {\n        return (\n            <React.Fragment>\n                <button \n                    onClick={this.toggleContent}\n                    className=\"ui button primary massive\"\n                >\n                    {this.state.rulesDisplayed ? 'Show Gameboard' : 'Show Rules'}\n                </button>\n                <button onClick={() => history.goBack()} className=\"ui button primary massive\">Back</button>\n            </React.Fragment>\n        );\n    }\n\n    showRules = () => {\n        return (\n            <div className=\"ruleContent\">\n                <div className=\"ruleImage\">\n                    <img src={process.env.PUBLIC_URL + \"../../assets/rules.png\"} alt=\"Image showing the rules for RPSLS\"/>\n                </div>\n            </div>\n        );\n    }\n\n    renderMessage = () => {\n        switch (this.state.instruction) {\n            case 'options':\n                return <div className=\"ui green message large\">Begin each round by choosing which card your are going to play.</div>\n            case 'userCard':\n                return <div className=\"ui green message large\">Cards you play will be displayed here.</div>\n            case 'compCard':\n                return <div className=\"ui green message large\">Cards the computer plays will be displayed here.</div>\n            case 'cardTracker':\n                return <div className=\"ui green message large\">Keep track of the remaining cards in your deck and your opponents deck using this tracker.</div>\n            case 'scoreTracker':\n                return <div className=\"ui green message large\">Track your current score here.</div>\n            case 'menu':\n                return <div className=\"ui green message large\">Navigate to the menu for more actions.</div>\n            default: \n                return;\n        }\n    }\n\n    showGameBoard = () => {\n        return (\n            <div className=\"instructionContent\">\n                <div className=\"ui big message large\">\n                    Interact with the game for more information.\n                </div>\n                <div className=\"instructions\">\n                    <div className=\"gameDisplay\">\n                        <img src={process.env.PUBLIC_URL + \"../assets/game-display-desktop.png\"} alt=\"Image of gameboard.\"/>\n                        <div className=\"interactiveOverlay\">\n                            <div \n                                onClick={(e) => this.handleClick(e)} \n                                className=\"interactiveOverlay__trigger interactiveOverlay__trigger--options\"\n                                data-instruction=\"options\"\n                            ></div>\n                            <div className=\"interactiveOverlay__container\">\n                                <div className=\"interactiveOverlay__cardDisplay\">\n                                    <div \n                                        onClick={(e) => this.handleClick(e)} \n                                        className=\"interactiveOverlay__trigger interactiveOverlay__trigger--userCard\"\n                                        data-instruction=\"userCard\"\n                                    ></div>\n                                    <div \n                                        onClick={(e) => this.handleClick(e)} \n                                        className=\"interactiveOverlay__trigger interactiveOverlay__trigger--compCard\"\n                                        data-instruction=\"compCard\"\n                                    ></div>\n                                </div>\n                                <div className=\"interactiveOverlay__adminArea\">\n                                    <div \n                                        onClick={(e) => this.handleClick(e)} \n                                        className=\"interactiveOverlay__trigger interactiveOverlay__trigger--cardTracker\"\n                                        data-instruction=\"cardTracker\"\n                                    ></div>\n                                    <div \n                                        onClick={(e) => this.handleClick(e)} \n                                        className=\"interactiveOverlay__trigger interactiveOverlay__trigger--scoreTracker\"\n                                        data-instruction=\"scoreTracker\"\n                                    ></div>\n                                    <div \n                                        onClick={(e) => this.handleClick(e)} \n                                        className=\"interactiveOverlay__trigger interactiveOverlay__trigger--menu\"\n                                        data-instruction=\"menu\"\n                                    ></div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {this.renderMessage()}\n            </div>\n        );\n    }\n\n    renderContent = () => {\n        if (!this.state.rulesDisplayed) {\n            return this.showGameBoard();\n        } else {\n            return this.showRules();\n        };\n    };\n\n    render() {\n        return (\n            <Modal\n                title=\"Instructions\"\n                content={this.renderContent()}\n                actions={this.renderActions()}\n                onDismiss={() => history.goBack()}\n            />\n        );\n    }\n};\n\nexport default Instructions;","import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyCr6cQFXFwCYl7-ClBTIAK6H6MhS6XNkC8\",\n    authDomain: \"new-rpsls.firebaseapp.com\",\n    databaseURL: \"https://new-rpsls.firebaseio.com\",\n    projectId: \"new-rpsls\",\n    storageBucket: \"new-rpsls.appspot.com\",\n    messagingSenderId: \"783810961248\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase;","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\n\nimport firebase from '../database/firebase/firebase';\n\nimport Modal from './Modal';\nimport history from '../utils/history';\n\nconst dbRef = firebase.database().ref();\n\nclass Leaderboard extends Component {\n\n    state={ players: [] }\n\n    componentDidMount(){\n        this.pullDataFromFirebase();\n    }\n    \n    pullDataFromFirebase = () => {\n        dbRef.once('value').then((snapshot) => {\n            const playerList = Object.values(snapshot.toJSON());\n            this.sortPlayerList(playerList);\n        });\n    }\n\n    sortPlayerList = (playerList) => {\n        const sortedList = playerList.sort((a, b) => {\n            if (a.win < b.win) return 1;\n            if (a.win > b.win) return -1;\n            if (a.win === b.win && a.lose > b.lose) return 1;\n            if (a.win === b.win && a.lose < b.lose) return -1;\n        });\n        // console.log(sortedList);\n        this.setState({ players: sortedList });\n    }\n\n    renderRankings = () => {\n        const list = this.state.players.map((player, index) => {\n            if ((player.win + player.lose + player.tie) === 25) {\n                return (\n                    <tr key={index}>\n                        <td data-label=\"Rank\">{index + 1}</td>\n                        <td data-label=\"Name\">{player.name}</td>\n                        <td data-label=\"Wins\">{player.win}</td>\n                        <td data-label=\"Loses\">{player.lose}</td>\n                    </tr>\n                )\n            }\n        });\n        return list;\n    }\n\n    renderContent = () => { \n        return (\n            <div className=\"leaderboard\">\n                <table className=\"ui celled large table unstackable\">\n                    <thead>\n                        <tr>\n                            <th className=\"rankColumn\">Rank</th>\n                            <th>Name</th>\n                            <th>Wins</th>\n                            <th>Loses</th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"rankList\">\n                        {this.renderRankings()}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    renderActions = () => {\n        return (\n            <React.Fragment>\n                <button onClick={() => history.goBack()} className=\"ui button primary massive\">Back</button>\n            </React.Fragment>\n        );\n    }\n\n\n\n    render(){\n        return (\n            <Modal\n                title=\"Leaderboard\"\n                content={this.renderContent()}\n                actions={this.renderActions()}\n                onDismiss={() => history.goBack()}\n            />\n        );\n    }\n};\n\nexport default Leaderboard;","import React, { Component } from \"react\";\n\nconst Menu = () => {\n    return <div>Menu</div>;\n}\n\nexport default Menu;","import React, { Component } from \"react\";\n\n\nconst Results = () => {\n    return <div>Results</div>;\n}\n\nexport default Results;","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\n\nimport Login from './Login';\nimport Game from './Game';\nimport Instructions from './Instructions';\nimport Leaderboard from './Leaderboard';\nimport Menu from './Menu';\nimport Results from './Results';\n\nimport background from '../backgroundImage/background.png';\nimport options from '../utils/options';\nimport firebase from '../database/firebase/firebase';\nimport history from '../utils/history';\n\n\nconst dbRef = firebase.database().ref();\n\nclass App extends Component {\n    state = {\n        playerName: '',\n        playerNameReady: false,\n        tie: 0,\n        win: 0,\n        lose: 0,\n        id: '',\n        windowWidth: 0,\n        windowHeight: 0,\n        recoveryDataExists: false,\n    }\n\n    componentDidMount() {\n        this.updateWindow();\n        window.addEventListener(\"resize\", this.updateWindow);\n    }\n\n    updateWindow = () => {\n        this.setState({\n            windowWidth: window.innerWidth,\n            windowHeight: window.innerHeight\n        });\n    }\n\n    handleChange = (e, testValue) => {\n        this.setState({ [e.target.id]: e.target.value }, () => testValue());\n    }\n\n    checkForPlayerNameReady = () => {\n        if (\n            this.state.playerName !== \"Enter a nickname\"\n            && this.state.playerName !== \"\"\n            && this.state.playerName !== \" \"\n            && this.state.playerName !== \"  \"\n            && this.state.playerName !== \"   \"\n        ) {\n            this.setState({ playerNameReady: true });\n        } else {\n            this.setState({ playerNameReady: false });\n        }\n    }\n\n    handleNewPlayerFormSubmit = (e) => {\n        e.preventDefault();\n        this.addNewPlayerToFirebase();\n    }\n\n    addNewPlayerToFirebase = () => {\n        const newPlayer = {\n            name: this.state.playerName,\n            win: this.state.win,\n            lose: this.state.lose,\n            tie: this.state.tie\n        }\n        dbRef.push(newPlayer).then((snap) => {\n            this.setState({ id: snap.key });\n        });\n    }\n\n    updateFirebase = (type) => {\n        dbRef.child(this.state.id).child(type).set(this.state[type]);\n    }\n\n    updateCount = (type) => {\n        this.setState({ [type]: this.state[type] + 1 }, () => this.updateFirebase(type));\n    }\n\n    setRecoveryDataState = () => {\n        this.setState({ recoveryDataExists: true });\n    }\n\n    resetGame = () => {\n        this.setState({\n            playerName: '',\n            playerNameReady: false,\n            tie: 0,\n            win: 0,\n            lose: 0,\n            id: '',\n            recoveryDataExists: '',\n        });\n    }\n\n    render() {\n        const backgroundImg = {\n            backgroundImage: `linear-gradient(to bottom, rgba(205, 169, 157, 0.7), rgba(205, 169, 157, 0.7)), url(${background})`\n        }\n        return (\n            // <div>App</div>\n            <div className=\"app\" style={backgroundImg}>\n                <div className=\"appWrapper\">\n                    <Route exact path=\"/\" exact render={(props) => (\n                        <Login\n                            history={history}\n                            playerName={this.state.playerName}\n                            playerNameReady={this.state.playerNameReady}\n                            handleChange={this.handleChange}\n                            handleNewPlayerFormSubmit={this.handleNewPlayerFormSubmit}\n                            addNewPlayerToFirebase={this.addNewPlayerToFirebase}\n                            checkForPlayerNameReady={this.checkForPlayerNameReady}\n                        />)}\n                    />\n                    <Route path=\"/game\" exact render={(props) => (\n                        <Game\n                            // history={history}\n                            // playerName={this.state.playerName}\n                            // updateCount={this.updateCount}\n                            // windowWidth={this.state.windowWidth}\n                            // windowHeight={this.state.windowHeight}\n                            // id={this.state.id}\n                            // setRecoveryDataState={this.setRecoveryDataState}\n                            // tie={this.state.tie}\n                            // win={this.state.win}\n                            // lose={this.state.lose}\n                            // recoveryDataExists={this.state.recoveryDataExists}\n\n                        />)}\n                    />\n                    <Route path=\"/menu\" exact render={(props) => (\n                        <Menu\n                            // recoverCurrentGameData={this.recoverCurrentGameData}\n                            // resetGame={this.resetGame}\n                        />)}\n                    />\n                    <Route path=\"/instructions\" exact render={(props) => (<Instructions />)} />\n                    <Route path=\"/leaderboard\" exact render={(props) => (<Leaderboard />)} />\n                    <Route path=\"/results\" exact render={(props) => (\n                        <Results\n                            // resetGame={this.resetGame}\n                            // tieCount={this.state.tie}\n                            // playerWinCount={this.state.win}\n                            // compWinCount={this.state.lose}\n                            // playerName={this.state.playerName}\n                            // history={history}\n                        />)}\n                    />\n                </div>\n            </div>\n        );\n    };\n}\n\n\nexport default App;","import './styles/App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from \"react-router-dom\";\n\nimport App from './components/App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.ce8f19bd.png\";"],"sourceRoot":""}